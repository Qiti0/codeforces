## 思想
### 递归

>递归的基本思想是某个函数直接或者间接地调用自身，这样原问题的求解就转换为了许多性质相同但是规模更小的子问题。求解时只需要关注如何把原问题划分成符合条件的子问题，而不需要过分关注这个子问题是如何被解决的
### 分治
>大概的流程可以分为三步：分解 -> 解决 -> 合并。

>1.分解原问题为结构相同的子问题。
分解到某个容易求解的边界之后，进行递归求解。
2.将子问题的解合并成原问题的解。

分治法能解决的问题一般有如下特征：

>1.该问题的规模缩小到一定的程度就可以容易地解决。
2.该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质，利用该问题分解出的子问题的解可以合并为该问题的解。
3.该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题。
### 倍增

>任何一个正整数都可以表示为 $ \sum_{i=0}^n2^i$

>通过指数爆炸降低次数
## STL容器
### 重载运算符
```c++
struct node{
    int a,b;
    bool operator <(const node x) const
    {
        return b<x.b
    }//重载小于号，对于set,map,sort(默认是小根堆)时从小到大排序，对于priority_queue(默认大根堆)，从大到小.
    bool operator <(const node &x,const node &y){
        return x.d<y.d;
    }
};
```
### set
```set<datatype> st;```
> 遍历
```c++
for(auto i: st) cout << i;
for(set<int> :: iterator it =st.begin(); it!=st.end();it++) cout << *it << "\n";
```
> 删除 ：```st.erase()```;
> 插入：```st.insert()```
>查找：``` st.find()```
### multiset

```multiset<int > mset ```

> 遍历
```c++
for(multiset<int> :: iterator it = mset.begin();it!=mset.end();it++) cout << *it;
```
>删除该元素的所有副本 ：``` mset.erase()```
>查找: ``` mset.find()```,返回该元素的迭代器值（位置）
>只删除该元素一次，删除该元素的地址：```auto X=mset.find(x),if(X!=mset.end()) mset.erase(X);```
>插入： ```mset.insert()```;
### map

```map<datatype,datatype> mp;```

> 遍历
```c++
for(const auto &i:mp) cout << i.first << i.second;
for(map<int,int> :: iterator it=mp.begin(); it!=mp.end();it++) cout << it->first << " " <<it.second;
```
### queue

#### queue

```queue<datatype> q;```
#### deque
```deque<datatype> dq;```
#### priority_queue
```priority_queue <int,vector <int>,greater<int>> q;```

> greater 从小到大，less 从大到小 。
### stack
```stack <datatype> st;```
### vector
```vector <int>   vc;```

> 读入
for(int i=0;i<m;i++) cin  >>  vc[i]

> 遍历
```c++ 
for(int i=0;i<vc.size();i++) cout << vc[i];
for(auto i=vc.begin();i!=vc.end();i++) cout << *i;
```
### 并查集
>作用:对于元素，集合的操作

>初始化
```c++
inline void init(int n)
{
    for(int i=1;i<=n;i++)
    {
        fa[i]=i;
        height[i]=1;
    }
}
```
>查找
```c++
int find(int x)
{
    fa[x]==x?x:(fa[x]=find(fa[x]));
}
```
>合并
```c++
inline merge(int i,int j)
{
    int x=find(x),int y=find(j);
    if(height(x)<=height(y))
    {
        fa[x]=y;
    }else{
        fa[y]=x;
    }
    if(height[x]==height[y]&&x!=y)
    {
        height[y]++;
    }
}
```
## 排序
### STL
sort(a,a+n,cmp());
>第一个参数 数组第一个元素
>第二个参数 数组最后一个元素的下一个位置

>即$范围是左闭右开[0,n)或[1,n+1)$

>cmp()是自定义比较函数,greater<>从小到大，less<>从大到小
### 归并排序(找逆序对)
```c++
int a[N],b[N]
void mergesort(int l,int r)
{
    if(l==r) return ;
    int mid=l+(r-l)/2;
    int i=l,j=mid+1,k=l;
    mergesort(l,mid);
    mergesort(mid+1,r);
    while(l<=mid&&j<=r)
    {
        if(a[i]<=a[j])
        {
            b[k++]=a[i++];   
        }    
        else
        {
            b[k++]=a[j++];
        }
    }
    while(i<=mid)
    {
        b[k++]=a[i++];
    }
    while(j<=r)
    {
        b[k++]=a[j++];
    }
    for(int i=l,j=0;i<r;i++,k++)
    {
        a[i]=b[j];
    }
}
//归并排序过程，不断分割序列，当分割为每个子序列只有一个元素时，每个子序列都是有序的，之后进行归并。
```
### 结构体排序
```c++
struct student
{
    int x,int y;
};
```
```c++
[](student a,student b){return a.x > return b.x};
```
```c++
struct student
{
    int x;
    int y;
    bool operator < (const student & tmp) const
    {
        return x > tmp.x; 
    }
};
```
```c++
bool cmp (student a,student b)
{
    return a.x > b.x;
}
```
## 前缀和&差分
### 前缀和
>快速查询区间和
### 差分
>快速实现区间修改
## 贪心
>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解
### 解法
>排序，先处理后选择或边处理边选择
## ST表
>应用:静态区间的可叠加问题 

> 预处理部分
### 快速幂
>将指数分半，降低循环次数

>最终的结果为所有奇数幂的值的乘积

>或者从二进制角度理解
```c++
typedef long long  ll;
ll quickpow(int a,int n,ll mod)
{
    a%=mod;
    while(n)
    {
        if(n&1) res=(res*a)%mod;//二进制判断最后一位是不是 0，也可以判断是否为偶数
        a=(a*a)%mod;
        n>>=1;//右移一位，去除二进制最后一位，也可以看作n/=2;
    }
    return res;
}
```
```c++
#include <iostream>
using namespace std;
const int N = 100010;
int a[N],lg[N]={-1},maxn[N][50]
int main()
{
    int n,m;
    scanf("%d%d",&m,&n);
    for(int i=1;i<=n;i++)
    {
        scanf("%d",&a[i]);
        lg[i]=lg[i>>1]+1;
        //lg[N]数组存储对数值
    }
    for(int i=1;i<=n;i++)
    {
        maxn[i][0]=a[i];
        //初始位置的maxn的值
    }
    for(int i=1;i<=lg[n])
        for(int j=1;j+(1<<i)-1<=n;j++)
        {
            maxn[j][i]=max(maxn[j][i-1],maxn[j+(1<<i-1)][i-1])
            //第一维 表示位置，第二维 表示跳的步数
        }
    return 0;
    int l,r;
    int len =lg[r-l+1];
    int answer = max(maxn[l][len],maxn[r-(1<<(len))+1][len])
}
```
> 1<<i 位运算 表示 $2^i$.
## 二分
### STL 
```c++
lower_bound(begin,end,value)//从小到大的有序序列中二分查找第一个大于等于value的数
upper_bound(begin,end,value)//从小到大的有序序列中二分查找第一个大于value的数
```
### 二分查找O(log n)
> 序列有序，最大值最小化，最小值最大化。
```c++
    int l,r,mid;
    while(l<=r)
    {
        mid=l+((r-l)>>1);
        if(check(mid,l))
        {
            l=mid+1;
        }
        else if(check(mid,r))
        {
             r=mid-1;   
        }
        else 
        {
            ans=mid;
        }
        return ans;
    }

```
### 二分答案
>二分枚举答案序列，检验是否满足条件，贪心
### 三分

$$
三分法与二分法的基本思想类似，但每次操作需在当前区间 [l,r]\\（下图中除去虚线范围内的部分）内任取两点 lmid,rmid(lmid < rmid)（下图中的两蓝点）。\\
如下图，如果 f(lmid)<f(rmid),则在 [rmid,r]（下图中的红色部分）中函数必然单调递增，\\最小值所在点（下图中的绿点）必然不在这一区间内，可舍去这一区间。反之亦然
$$



![](三分.png)
```c++
const int eps = 0.000001//极小的数
int r,l,mid,rmid,lmid;
    while(r-l>eps)
    {
        mid=(lmid+rmid)/2;
        lmid=mid-eps;
        rmid=mid+eps;
        if(f(lmid)<f(rmid))
        {
            r=mid;
        }
        else l=mid;
    }

```
## 离散化
> 概念:我们只关心数据的大小关系时，用排名代替原始数据进行处理的一种预处理方法
```c++
int a[N],c[N];
int n=sizeof(a);
memcpy(c,a,sizeof(a));
sort(c,c+n);
sort(c+c+n,greater<int>());//从大到小
int l=unique(c,c+n)-c;//去重
for(int i=0;i<n;i++) l[i]=lower_bound(c,c+l,a[i])-c+1;//从小到大查找
l[i]=lower_bound(c,c+l,a[i],greater<int>())-c+1;//从大到小查找
```
###
## 树状数组
### 应用：
>1.单点修改 区间查询(前缀和)

>2.区间修改，单点查询(差分)

>3.区间查询，区间修改

>换言之，线段树能解决的问题，树状数组大部分也可以，但是并不一定都能解决，因为线段树的扩展性比树状数组要强.

> lowbit()运算：一个非负整数n在二进制下的最低为1及其后面的0构成的数

>实现：将该整数取反，加1,得到相反数，再进行 & 运算.
```c++
lowbit(int x)
{
    return (x&(-x));
}
```
> x&(-x) == $2^k$
> k 为i的二进制中从最低位到高位连续零的长度

![树状数组](树状数组.png)
> a[i] 为原数组，t[i]为树状数组

>特征：树状数组中节点x的父节点为x+lowbit(x)

>例如t[2]的父节点为t[4]=t[2+lowbit(2)]
#### 单点修改(建树操作)
```c++
int add_dandian(int x,int k)
{
	for(int i=x;i<=n;i+=lowbit(i))
	t[i]+=k;
}

```
>使用lowbit()来更新父节点.

![树状数组](树状数组2.png)
>t[i]存储以x为根的子树中叶子节点值的和

>sum[7]=t[7]+t[6]+t[4] ,6=7-lowbit(7),4=6-lowbit(6)

>所以我们可以通过不断的-lowbit操作来实现

#### 求和
```c++
int add(int x)
{
    for(int i=x;i;i-=lowbit())//注意循环终止条件
    {
      sum+=t[i];  
    }
}
```
>前缀和数组：s[i]=s[i-1]+a[i];(处理区间和,要求[l,r]上a[i]的和，就是s[r]-s[l-1];).

>差分数组：a[i]=s[i]-s[i-1]；(处理区间值的改变，要使s[i]在[l,r]上增加n，就构造差分数组a[i],使a[l]+n,a[r+1]-n).
#### 区间求和
```c++
int search(int L,int R)
{
	int ans = 0;
	for(int i=L-1;i;i-=lowbit(i))
	ans-=s[i];
	for(int i=R;i;i-=lowbit(i))
	ans+=s[i];
	return 0;
    //s[i]为前缀和数组
}

```
#### 区间修改
```c++
int update(int pos,int k)//pos表示修改点的位置,K表示修改的值也即+K操作
{
	for(int i=pos;i<=n;i+=lowbit(i))
	c[i]+=k;
	return 0;
    //c[i]为差分数组
}
//建立差分树状数组
update(L,k);
update(R+1,-k);
```
#### 单点查询
```c++
ll ask(int pos)//返回区间pos到1的总和
{
	ll ans=0;
	for(int i=pos;i;i-=lowbit(i)) ans+=c[i];
	return ans;
    //c[i]为要查询数组的差分数组
} 

```
## 线段树
### 应用：区间查询，求和，支持在线操作
### 建树操作(递归实现)
![线段树](线段树.png)
> a[1:6]={1,8,6,4,3,5}

>l = fa*2 （左子树下标为父亲下标的两倍）

>r = fa*2+1（右子树下标为父亲下标的两倍+1）

>位运算寻找

>k<<1（结点k的左子树下标）

>k<<1|1（结点k的右子树下标）
```c++
const int N = 1000050;
int a[N],t[N<<2];
void pushup(int k)//k 为当前节点
{
    t[k]=max(t[k<<1],t[k<<1|1]//
    //比较左右儿子，更新父节点
}//更新函数,更新父节点，可以进行取最大，最小，区间和等.
void build(int k,int l,int r)
{
    if(l==r)
    {
        t[k]=a[l];
    }
       int mid = l+((r-l)>>1); 
        build(k<<1,l,mid);
        build(k<<1|1,mid+1,r);
        pushup(k);
    
}
//单点更新
//update(p,v,1,r,1),从根节点递归更新
void update(int p,int v,int l,int r,int k)
{
    if(l==r)
    {
        a[p]+=v;
        t[k]+=v;
    }
    
        int mid= l+((r-l)>>1);
        if(p<=m) update(p,v,l,mid,k<<1);
        else update(p,v,mid+1,r,k<<1|1);
        pushup(k);
    

}
//区间查询
//query(L,R,1,r,1),从根节点开始递归
int query(int L,int R,int l,int r,int k)
{
    if(l<=L && r>=R) return t[K];
    
    
        // pushdown(k);
        //有lazy_tag标记时加入，更新子树.
        int res = INF;
        int mid= L+(R-L)/2;
        if(l<=m) res=max(res,query(L,R,l,mid,k<<1));
        if(r>m) res=max(res,query(L,R,mid+1,r,k<<1|1));
        return res;
    
}
//区间更新与懒惰标记
void pushdown(int k)
{
    if(lazy[k])
    {
        lazy[k<<1] += lazy[k];
        lazy[k<<1|1] += lazy[k];
        t[k<<1] += lazy[k];
        t[k<<1|1] += lazy[k];
        lazy[k]=0;
    }
}
void update(int L,int R,int v,int l,int r,int k)
{
    if(l<=L && R<=r) 
    {
        lazy[k]+=v;
        t[k] +=v;
    }
        pushdown[k];
        int mid =L+ (R-L)/2;
        if(l<=m) update(L,R,v,l,mid,k);
        if(m<r) update(L,R,v,mdi+1,r,k));
        pushup(k);  
    
}
```
## 搜索
###  BFS
>一般用队列实现
```c++
queue <int> q;
int g[];
bool st[];
int dx[4]={0,1,-1,0};
int dy[4]={1,0,0,-1};
bool check()
{
     // 判断是否满足条件
}
void bfs(int x)
{
    q.push(x);
    st[x]=1;
    while(!q.empty())
    {
        int t=q.front();
        q.pop();
        if(st[t]) continue;
        for(int i=0;i<4;i++)
        {
            int x= t+dx[i]; 
            if(check())
            {
                st[x]=1;
                q.push(x);
            }
        }
    }
}

```
### DFS
```c++
void dfs(当前状态){
	if(当前状态 == 目的状态){
        ···
        return;
    }
    for(···寻找新状态){
        if(状态合法){
            vis[访问该点]；
            dfs(新状态);
            ?是否需要恢复现场->vis[恢复访问]
        } 
    }
    if(找不到新状态){
        ···
    }
    return ;
}
```
>dfs递归进入下一层时，如果下一层满足条件或执行结束return回上一层dfs函数.

>lambda 表达式 实现 DFS （Y-combinator）
```c++
	auto dfs = [&](auto self ,int i) -> void//lambda 表达式
	{
		if(i == m)
		{
			.....
			return;
		}
		......//搜索操作
		self(self, i + 1);
		......//恢复现场
	}
	dfs(dfs , 0 );
```
## 数论

### 模运算
#### 模运算规则

$$
1. (a + b)mod\ p=(a\ mod\ p+b\ mod\ p)\ mod\ p;\\
2. (a - b)mod\ p=(a\ mod\ p-b\ mod\ p)\ mod\ p;\\
3. (a*b)mod\ p=(a\ mod\ p\ *\ b\ mod\ p)\ mod\ p;\\ 
4. a^b\ mod\ p=((a\ mod\ p)\ ^\ b)\ mod\ p ;\\
5. 除法不满足以上的运算，需要通过求逆元转化为乘法。
$$



### 乘法逆元
#### 逆的概念

$$
给定整数a,且满足gcd(a,m)=1,ax \equiv\ 1(mod m)的一个解为a的逆为a^{-1}
$$

#### 求逆的方法
1. 扩展欧几里得算法
2. 费马小定理
3. 递推求逆
#### 扩展欧几里得法
```c++
void exgcd(int a, int b, int& x, int& y) {
  if (b == 0) {
    x = 1, y = 0;
    return;
  }
  exgcd(b, a % b, y, x);
  y -= a / b * x;
}
```
#### 费马小定理

$$
b 为素数,gcd(a,b)=1(即a,b 互质),a^{b-1}\equiv\ 1
x 为 a 逆元
ax\equiv1\ (mod\ b)\\
ax\equiv\ a^{b-1}(mod\ b)\\
x\equiv\ a^{b-2}(mod\ b)
$$

```c++
int qpow(long long a, int b) {
  int ans = 1;
  a = (a % p + p) % p;
  for (; b; b >>= 1) {
    if (b & 1) ans = (a * ans) % p;
    a = (a * a) % p;
  }
  return ans;
}
```
## 图论

### 图存储的方法

#### 邻接矩阵

```c++
int e[N][N]
void add(int u,int v,int w)
{
	e[u][v]=w;
}
```



#### 邻接表(链式前向星)

```c++
int h[N],idx;
struct edge
{
 	int from,to,next;
    int w;
}e[N];
void init()//初始化函数
{
    memset(h,-1,sizeof h);
    for(int i=0;i<N;i++) e[i].next=-1;
    idx=0;
}
void add(int u,int v,int w)//添加边
{
   	e[idx].from=u;
	e[idx].to=v;//存储下一个点
    e[idx].w=w;//存储边权
    e[idx].next=h[u];//存储下一个点的编号
    h[u]=idx++;
}
```

#### vecoter实现图的存储
```c++
vecotr<int> G[N];//邻接表,下标与该点存储的值构成一条边
    for(int i=0;i<m;i++)
    {
        int a,b;
        cin >> a >> b;
        g[a].push_back(b);
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<g[i].size();j++)
        {
            cout << i << "-->" << g[i][j] <<"\n";
        }
    }
struct int node//带权值的结构体
{
	int to;//指向的点
	int w;//边权
	node(int tto,int ww)//构造函数
	{
		to=tto;
		w=ww;
	}
}
vector<node> G[N];
    for(int i=0;i<m;i++)
    {
        int a,b,w;
        cin >> a >> b >> w;
        g[a].push_back(node(b,w));
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<g[i].size();j++)
        {
            cout << i << "-->" << g[i][j].to<<"边权"<<g[i][j].w <<"\n";
        }
    }
```
### 最短路算法

#### Dijkstra

```c++
typedef pair<int,int> pii;
struct node{
    int to,w;
    node(int tto,int ww)
    {
        to=tto;
        w=ww;
    }
};
vector <node> g[N];
bool vied[N];
int dist[N];
priority_queue<pii,vector<pii>,greater<pii> > heap;
int n,m,s;
void dijkstra()
{
    memset(dist,0x3f,sizeof(dist));
    dist[1]=0;
    heap.push({0,1});
    while(heap.size())
    {
        pii t=heap.top();
        heap.pop();
        int vis=t.second;
        if(vied[vis]) continue;
        vied[vis]=1;    
        for(auto ed:g[vis])//vector遍历vis的每一个子节点
        {
            int to=ed.to;
            int w=ed.w;
            if(dist[to]>dist[vis]+w)
            {
                dist[to]=dist[vis]+w;
                heap.push({dist[to],to});
            }
        } 
    }
}
```
#### 分层最短路
>存在k条边边权可以为零的最短路问题，一般有两种解决思想
1. 建图时建成k+1层,对于每个点都可以选择下一条边是否可以赋值为零
2. 多开一维记录机会信息
```c++
dis[N][机会信息],visd[N][机会信息];
struct edge
{
    int to,w;
    edge(int tto,int ww)
    {
        to=tto;
        w=ww;
    }
};
struct node
{
    int id,w,used;//used 存储是否使用免费操作
    bool operator <(const node x)const//重载小于号
    {
        return w>x.w;//大根堆，从小到大
    }
    node(int uused,int ww,int iid)
    {
        id=iid;
        w=ww;
        used=uused;
    }
};
vector<edge> g[N];
priority_queue<node,vector<node> >q;
int n,m,k;
int visd[N][15],dis[N][15];
void dijstra(int s)
{
    memset(dis,63,sizeof(dis));
    dis[s][0]=0;
    q.push(node(0,0,s));
    while(q.size())
    {
        int now=q.top().id;
        int kk=q.top().used;
        q.pop();
        if(visd[now][kk]) continue;
        visd[now][kk]=1;
        for(auto t:g[now])
        {
            //不选择免费操作
            if(dis[t.to][kk]>dis[now][kk]+t.w)
            {   
                dis[t.to][kk]=dis[now][kk]+t.w;
                q.push(node(kk,dis[t.to][kk],t.to));
            }
            //选择免费操作
            if(kk+1<=k&&dis[t.to][kk+1]>dis[now][kk])
            {
                dis[t.to][kk+1]=dis[now][kk];
                q.push(node(kk+1,dis[t.to][kk+1],t.to));
            }
        }
    }
}
```
### 最小生成树(MST)
>无向连通图的边权和最小的生成树
#### kuskal
>从小到大加入边
#### prim
>每次选择距离最小的一个点，用新的边更新其他节点的距离。(类dijkstra的思想)
```c++
int res=0,cnt=0;
int n,m;
void prim()
{
    memset(dis,63,sizeof(dis));
    dis[1]=0;
    q.push(node(1,0));
    while(q.size())
    {
        if(cnt>=n) break;
        int u=q.top().id;
        q.pop();
        if(visd[u]) continue;
        visd[u]=1;
        cnt++;
        for(auto t:g[u])
        {
            if(dis[t.to]>t.w)//比较当前点与该点指向的节点的边权的大小
            {
                dis[t.to]=t.w;
                q.push(node(t.to,dis[t.to]));
                res+=dis[t.to];
            }
        }
    }

}
```
### 最近公共祖先(LCA)

## 动态规划:point_left::clown_face::rofl:

> 条件:最优子结构，无后效性，子问题重叠
### 基本思路:
1. 将原问题化为若干**阶段**，每个阶段对应若干个子问题，提取子问题的特征称为(**状态**)。
2. 寻找每一个状态可能的**决策**，或者说各个状态之间的转移方程(**状态转移方程**)
3. 按照顺序求解每个阶段的问题
### 记忆化搜索
> 定义:通过记录已经遍历过的状态的信息，从而避免对同一状态的重复遍历
#### 如何记忆化搜索
1. 将该题的**DP**状态和转移方程写出
2. 写出dfs函数
3. 添加记忆化数组
### 背包DP
#### 0-1背包

$$
每个物体都只有两者种状态，取或者不取，对应二进制中的0-1。\\
已知条件有第 i 个物品的重量w_{i}，价值 v_{i}，以及背包的总容量 W。\\
设 DP 状态 f_{i,j}为在只能放前 i个物品的情况下，容量为 j 的背包所能达到的最大总价值。\\  

                       状态转移方程\\
                       f_{i,j}=max(f_{i-1,j},f_{i-1,j-wi}+vi)\\
$$

```c++
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
        {
            if(j<c[i]) dp[i][j]=dp[i-1][j];
            else dp[i][j]=max(dp[i-1][j],dp[i-1][j-c[i]]+w[i]);
        }

```
$$
由于对f_i有影响的只有f_{i-1},即我们只需要相邻的t,t-1所以可以去掉第一维度\\

                       滚动数组优化\\
                       f_j=max(f_j,f_{j-wi}+vi)
$$



```c++

for(int i=1;i<=n;i++)
    for(int j=w;j>=w[i];j--)
    {
        f[j]=max(f[j],f[j-w[i]]+v[i]);
    }

```
#### 完全背包
> 与0-1背包区别是一个物体可以取无限次

>                           $$
>                           状态转移方程\\f_{i,j} = \max\limits^{+\infty}_{k=0}(f_{i-1,j-k\times wi}+vi\times k)
>                           $$

$$
优化：f_{i,j-w_i} 已经由 f_{i,j-2\times w_i} 更新过，那么 f_{i,j-w_i} 就是充分考虑了第 i 件物品所选次数后得到的最优结果。\\

换言之，我们通过局部最优子结构的性质重复使用了之前的枚举过程，优化了枚举的复杂度。\\
                           转移方程\\
                           f_{i,j}=max(f_{i-1,j},f_{i,j-wi}+vi)
$$

```c++
for(int i=1;i<=n;i++)
    for(int j=c[i];j<=c;j++)
    {
       f[i][j]=max(f[i-1][j],f[i-1][j-c[i]]+w[i]);
    }


```
#### 多重背包
> $$
> 0-1背包的变式，区别在于每种物品的个数为$k_i$个，而非一个\\
> 状态转移方程
> f_{i,j}=\max\limits^{k_i}_{k=0}(f_{i-1,j-k\times wi}+wi\times k)
> $$

> 优化: 二进制分组优化

#### 混合背包

> 0-1,完全，多重背包的混合
#### 二维费用背包
> 0-1背包，但是选一种物品会消耗两种价值，增加一个维度存储价值即可。
```c++
for(int i=1;i<=n;i++)
    for(int j=t;j>=ti;j--)
        for(int k=m;m>=mi;m--)
        {
            dp[j][k]=max(dp[j][k],dp[j-ti][k-mi]+1);
        }
```
#### 最长公共子序列(LCS) *O(nm)*

$$
dp[i][j]表示在X序列上($x_i$)与Y序列上($y_j$)上最长的公共子序列长度。
$$

>                             $$
>                             状态转移方程
>                             if(i=j)dp[i][j] =dp[i-1][j-1]+1$;
>                             if (i!=j) dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
>                             $$
#### 最长递增子序列(LIS) *O($n^2$)*
##### DP做法

$$
dp[i]表示以第i个数结尾的最长递增子序列的长度

                            状态转移方程\\
                             dp[i]=max(dp[j])+1,0<j<i,A_j<A_i\\
                              j在(0 ~ i)上循环，i在(0~n)上循环
$$

##### 贪心做法
```c++
int lis[N],now;
if(now>lis末尾的数) 把now加到lis末尾
if(now<lis末尾的数) 从头遍历lis找到第一个大于now的数
```
### 区间DP
### DAG上的DP
### 树形DP
### 状压DP


## 双指针
### 定义：
>双指针顾名思义，就是同时使用两个指针，在序列、链表结构上指向的是位置，在树、图结构中指向的是节点，通过或同向移动，或相向移动来维护、统计信息。

### 用法 :

> 1.维护具有一定的单调性的区间，新增或删减一个元素比较方便
>
> 2.和其他的数据结构一起使用
>
> 3.两个指针，快慢指针(在单向链表中找环)或者前后指针